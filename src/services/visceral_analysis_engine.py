#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Visceral Analysis Engine
Motor de an√°lise visceral baseado no documento de integra√ß√£o
"""

import logging
import time
import json
from datetime import datetime
from typing import Dict, List, Optional, Any
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class VisceralAnalysisEngine:
    """Motor de an√°lise visceral com todos os componentes do documento"""
    
    def __init__(self):
        """Inicializa o motor de an√°lise visceral"""
        self.agents = {
            'arquelogo_persuasao': {
                'name': 'ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO',
                'mission': 'Escavar cada segundo, palavra e pausa para encontrar o DNA COMPLETO da convers√£o',
                'tools': ['Python', 'An√°lise cir√∫rgica', 'Mapeamento psicol√≥gico']
            },
            'mestre_persuasao_visceral': {
                'name': 'MESTRE DA PERSUAS√ÉO VISCERAL',
                'mission': 'Engenharia Reversa Psicol√≥gica Profunda',
                'language': 'Direta, brutalmente honesta, carregada de tens√£o psicol√≥gica'
            },
            'arquiteto_pre_pitch': {
                'name': 'ARQUITETO DO PR√â-PITCH INVIS√çVEL',
                'mission': 'Orquestrar SINFONIA DE TENS√ÉO PSICOL√ìGICA',
                'specialty': 'Sequ√™ncias de instala√ß√£o psicol√≥gica'
            },
            'diretor_experiencias': {
                'name': 'DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS',
                'mission': 'Transformar conceitos abstratos em experi√™ncias f√≠sicas inesquec√≠veis',
                'focus': 'PROVIs (Provas Visuais Instant√¢neas)'
            },
            'arquiteto_drivers': {
                'name': 'ARQUITETO DE DRIVERS MENTAIS',
                'mission': 'Criar gatilhos psicol√≥gicos como √¢ncoras emocionais e racionais',
                'specialty': 'Sistema de ancoragem psicol√≥gica'
            }
        }
        
        logger.info("Visceral Analysis Engine inicializado com 5 agentes especializados")
    
    def generate_complete_visceral_analysis(
        self, 
        data: Dict[str, Any],
        session_id: str = None
    ) -> Dict[str, Any]:
        """Gera an√°lise visceral completa com todos os componentes"""
        
        try:
            logger.info("üß† Iniciando an√°lise visceral completa...")
            
            # Salva in√≠cio da an√°lise
            salvar_etapa("analise_visceral_iniciada", {
                "data": data,
                "agents": list(self.agents.keys()),
                "timestamp": time.time()
            }, categoria="analise_completa")
            
            # Executa cada componente
            visceral_analysis = {}
            
            # 1. An√°lise Forense Devastadora (Arque√≥logo)
            logger.info("üîç Executando an√°lise forense devastadora...")
            forensic_analysis = self._execute_forensic_analysis(data)
            if forensic_analysis:
                visceral_analysis['analise_forense_devastadora'] = forensic_analysis
                salvar_etapa("analise_forense", forensic_analysis, categoria="analise_completa")
            
            # 2. Engenharia Reversa Psicol√≥gica (Mestre Persuas√£o)
            logger.info("üß¨ Executando engenharia reversa psicol√≥gica...")
            psychological_reverse = self._execute_psychological_reverse_engineering(data)
            if psychological_reverse:
                visceral_analysis['engenharia_reversa_psicologica'] = psychological_reverse
                salvar_etapa("engenharia_reversa", psychological_reverse, categoria="analise_completa")
            
            # 3. Sistema de Drivers Mentais (Arquiteto Drivers)
            logger.info("‚ö° Executando sistema de drivers mentais...")
            mental_drivers_system = self._execute_mental_drivers_system(data)
            if mental_drivers_system:
                visceral_analysis['sistema_drivers_mentais'] = mental_drivers_system
                salvar_etapa("drivers_mentais", mental_drivers_system, categoria="drivers_mentais")
            
            # 4. Sistema Anti-Obje√ß√£o (Especialista Psicologia)
            logger.info("üõ°Ô∏è Executando sistema anti-obje√ß√£o...")
            anti_objection_system = self._execute_anti_objection_system(data)
            if anti_objection_system:
                visceral_analysis['sistema_anti_objecao_completo'] = anti_objection_system
                salvar_etapa("anti_objecao_completo", anti_objection_system, categoria="anti_objecao")
            
            # 5. Pr√©-Pitch Invis√≠vel (Arquiteto Pr√©-Pitch)
            logger.info("üé≠ Executando pr√©-pitch invis√≠vel...")
            pre_pitch_invisible = self._execute_pre_pitch_invisible(data, mental_drivers_system)
            if pre_pitch_invisible:
                visceral_analysis['pre_pitch_invisivel_completo'] = pre_pitch_invisible
                salvar_etapa("pre_pitch_completo", pre_pitch_invisible, categoria="pre_pitch")
            
            # 6. Sistema de Provas Visuais (Diretor Experi√™ncias)
            logger.info("üéØ Executando sistema de provas visuais...")
            visual_proofs_system = self._execute_visual_proofs_system(data)
            if visual_proofs_system:
                visceral_analysis['sistema_provas_visuais_completo'] = visual_proofs_system
                salvar_etapa("provas_visuais_completo", visual_proofs_system, categoria="provas_visuais")
            
            # 7. Dashboard do Avatar (An√°lise Profunda)
            logger.info("üë§ Executando dashboard do avatar...")
            avatar_dashboard = self._execute_avatar_dashboard(data)
            if avatar_dashboard:
                visceral_analysis['dashboard_avatar_completo'] = avatar_dashboard
                salvar_etapa("avatar_dashboard", avatar_dashboard, categoria="avatar")
            
            # 8. Sistema Completo de Provas Visuais Instant√¢neas
            logger.info("üéØ Executando sistema completo de PROVIs...")
            provis_system = self._execute_complete_provis_system(data, ai_analysis)
            if provis_system:
                visceral_analysis['sistema_provis_completo'] = provis_system
                salvar_etapa("provis_sistema_completo", provis_system, categoria="provas_visuais")
            
            # 9. An√°lise Forense Devastadora Completa
            logger.info("üîç Executando an√°lise forense devastadora...")
            forensic_complete = self._execute_complete_forensic_analysis(data)
            if forensic_complete:
                visceral_analysis['analise_forense_completa'] = forensic_complete
                salvar_etapa("analise_forense_completa", forensic_complete, categoria="analise_completa")
            
            # Consolida an√°lise final
            visceral_analysis['metadata_visceral'] = {
                'generated_at': datetime.now().isoformat(),
                'agents_used': list(self.agents.keys()),
                'components_generated': len(visceral_analysis),
                'analysis_type': 'visceral_complete',
                'quality_level': 'premium_visceral'
            }
            
            # Salva an√°lise completa
            salvar_etapa("analise_visceral_completa", visceral_analysis, categoria="analise_completa")
            
            logger.info(f"‚úÖ An√°lise visceral completa: {len(visceral_analysis)} componentes gerados")
            return visceral_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise visceral: {str(e)}")
            salvar_erro("analise_visceral", e, contexto=data)
            return self._generate_fallback_visceral_analysis(data)
    
    def _execute_forensic_analysis(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa an√°lise forense devastadora"""
        
        try:
            prompt = f"""
Voc√™ √© o ARQUE√ìLOGO MESTRE DA PERSUAS√ÉO. Sua miss√£o √© escavar cada elemento psicol√≥gico para encontrar o DNA COMPLETO da convers√£o.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- P√∫blico: {data.get('publico', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}

Execute uma AN√ÅLISE FORENSE DEVASTADORA seguindo as 12 CAMADAS PROFUNDAS:

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "resumo_executivo": {{
    "veredicto_geral": "An√°lise de 1-10",
    "top_3_pontos_fortes": ["Ponto 1", "Ponto 2", "Ponto 3"],
    "estrategia_principal": "Estrat√©gia identificada"
  }},
  "cronometragem_detalhada": {{
    "abertura_0_3min": "An√°lise da abertura",
    "educacao_conteudo": "An√°lise do desenvolvimento",
    "transicao_venda": "An√°lise da transi√ß√£o",
    "apresentacao_oferta": "An√°lise da oferta",
    "fechamento_cta": "An√°lise do fechamento"
  }},
  "dna_conversao": {{
    "formula_estrutural": "F√≥rmula extra√≠da",
    "sequencia_gatilhos": ["Gatilho 1", "Gatilho 2", "Gatilho 3"],
    "padroes_linguagem": ["Padr√£o 1", "Padr√£o 2"],
    "timing_otimo": "Timing ideal de cada elemento"
  }},
  "metricas_objetivas": {{
    "duracao_total": "X minutos",
    "densidade_informacional": "X informa√ß√µes/minuto",
    "ratio_eu_voce": "X% vs X%",
    "promessas_totais": 0,
    "provas_oferecidas": 0,
    "ratio_promessa_prova": "1:X"
  }},
  "analise_quantitativa": {{
    "credibilidade_score": 85,
    "logica_vs_emocao": {{"logicos": 40, "emocionais": 60}},
    "gatilhos_cialdini": {{
      "reciprocidade": 3,
      "compromisso": 2,
      "prova_social": 5,
      "afinidade": 4,
      "autoridade": 6,
      "escassez": 2
    }},
    "intensidade_emocional": {{
      "medo": 7,
      "desejo": 8,
      "urgencia": 6,
      "aspiracao": 9
    }}
  }},
  "premissas_estabelecidas": [
    "Premissa 1 - Como estabelece",
    "Premissa 2 - Como estabelece",
    "Premissa 3 - Como estabelece"
  ],
  "sequencia_logica": {{
    "gaps_logicos": ["Gap 1", "Gap 2"],
    "silogismo_principal": "Se A, ent√£o B, ent√£o C",
    "falacias_utilizadas": ["Fal√°cia 1", "Fal√°cia 2"]
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=3000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido na an√°lise forense")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro na an√°lise forense: {e}")
            return None
    
    def _execute_psychological_reverse_engineering(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa engenharia reversa psicol√≥gica profunda"""
        
        try:
            prompt = f"""
Voc√™ √© o MESTRE DA PERSUAS√ÉO VISCERAL. Sua linguagem √© direta, brutalmente honesta, carregada de tens√£o psicol√≥gica.

Realize uma ENGENHARIA REVERSA PSICOL√ìGICA PROFUNDA para:

SEGMENTO: {data.get('segmento', 'N√£o informado')}
PRODUTO: {data.get('produto', 'N√£o informado')}
P√öBLICO: {data.get('publico', 'N√£o informado')}

Crie um DOSSI√ä CONFIDENCIAL que permita "LER A MENTE" dos leads.

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "perfil_psicologico_profundo": {{
    "nome_ficticio": "Nome representativo",
    "idade_aproximada": "Faixa et√°ria",
    "ocupacao_situacao": "Situa√ß√£o de vida",
    "jornada_dor": "Resumo da jornada de dor"
  }},
  "feridas_abertas": [
    "No fundo, ele(a) teme desesperadamente...",
    "A dor mais profunda √©...",
    "O que mais o(a) envergonha √©...",
    "O medo secreto que nunca admite √©...",
    "A ferida que nunca cicatrizou √©..."
  ],
  "sonhos_proibidos": [
    "Mais do que tudo, ele(a) anseia por...",
    "O desejo secreto que nunca confessa √©...",
    "O que realmente quer √©...",
    "O sonho imposs√≠vel √©...",
    "A fantasia oculta √©..."
  ],
  "demonios_internos": [
    "O pensamento que o(a) congela √©...",
    "O medo paralisante √©...",
    "O terror noturno √©...",
    "A ansiedade constante √©...",
    "O p√¢nico secreto √©..."
  ],
  "correntes_cotidiano": [
    "No dia a dia, luta constantemente com...",
    "As pequenas coisas que o(a) tiram do s√©rio s√£o...",
    "A frustra√ß√£o di√°ria √©...",
    "O que mais o(a) irrita √©...",
    "A rotina que o(a) sufoca √©..."
  ],
  "dialeto_alma": {{
    "frases_dores": ["Frase t√≠pica sobre dor 1", "Frase t√≠pica sobre dor 2"],
    "frases_desejos": ["Frase t√≠pica sobre desejo 1", "Frase t√≠pica sobre desejo 2"],
    "metaforas_comuns": ["Met√°fora 1", "Met√°fora 2"],
    "influenciadores_confianca": ["Fonte 1", "Fonte 2"],
    "fontes_desprezadas": ["Fonte desprezada 1", "Fonte desprezada 2"]
  }},
  "muralhas_desconfianca": [
    "J√° tentei de tudo, nada funciona",
    "Meu caso √© muito espec√≠fico",
    "N√£o tenho tempo para implementar",
    "Preciso de mais garantias"
  ],
  "visoes_paraiso_inferno": {{
    "dia_perfeito": "Narrativa do dia perfeito p√≥s-transforma√ß√£o",
    "pesadelo_recorrente": "Narrativa do pesadelo sem a solu√ß√£o"
  }},
  "como_usar_dossie": {{
    "angulos_copy_poderoso": ["√Çngulo 1", "√Çngulo 2"],
    "tipos_conteudo_atrativo": ["Tipo 1", "Tipo 2"],
    "tom_voz_ideal": "Tom recomendado",
    "gatilhos_emocionais": ["Gatilho 1", "Gatilho 2"]
  }},
  "segmentacao_psicologica": [
    {{
      "nome_segmento": "Segmento 1",
      "caracteristicas": ["Caracter√≠stica 1", "Caracter√≠stica 2"],
      "abordagem_especifica": "Como abordar este segmento"
    }}
  ]
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=3500)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido na engenharia reversa")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro na engenharia reversa: {e}")
            return None
    
    def _execute_mental_drivers_system(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa sistema completo de drivers mentais"""
        
        try:
            prompt = f"""
Voc√™ √© o ARQUITETO DE DRIVERS MENTAIS. Crie gatilhos psicol√≥gicos que funcionam como √¢ncoras emocionais e racionais.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}
- P√∫blico: {data.get('publico', 'N√£o informado')}

Crie um ARSENAL COMPLETO de drivers mentais customizados baseado nos 19 DRIVERS UNIVERSAIS.

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "drivers_emocionais_primarios": [
    {{
      "nome": "DRIVER DA FERIDA EXPOSTA",
      "gatilho_central": "Emo√ß√£o ou l√≥gica core",
      "definicao_visceral": "1-2 frases que capturam a ess√™ncia",
      "mecanica_psicologica": "Como funciona no c√©rebro",
      "momento_instalacao": "Quando plantar durante a jornada",
      "roteiro_ativacao": {{
        "pergunta_abertura": "Pergunta que exp√µe a ferida",
        "historia_analogia": "Hist√≥ria que ilustra o conceito",
        "metafora_visual": "Met√°fora que ancora na mem√≥ria",
        "comando_acao": "Comando que direciona comportamento"
      }},
      "frases_ancoragem": [
        "Frase 1 pronta para usar",
        "Frase 2 pronta para usar",
        "Frase 3 pronta para usar"
      ],
      "prova_logica": "Dados/fatos que sustentam",
      "loop_reforco": "Como reativar em momentos posteriores"
    }}
  ],
  "drivers_racionais_complementares": [
    {{
      "nome": "DRIVER DO M√âTODO VS SORTE",
      "gatilho_central": "Diferen√ßa entre m√©todo e tentativa",
      "definicao_visceral": "Parar de tentar e come√ßar a aplicar m√©todo",
      "roteiro_ativacao": {{
        "pergunta_abertura": "Voc√™ est√° tentando ou aplicando m√©todo?",
        "historia_analogia": "Hist√≥ria espec√≠fica de m√©todo vs tentativa",
        "metafora_visual": "Met√°fora visual poderosa",
        "comando_acao": "Comando espec√≠fico de a√ß√£o"
      }},
      "frases_ancoragem": [
        "M√©todo elimina tentativa e erro",
        "Profissionais com m√©todo crescem 10x mais r√°pido",
        "Sorte √© para quem n√£o tem m√©todo"
      ],
      "prova_logica": "Metodologia reduz tempo de resultado em 80%"
    }}
  ],
  "sequenciamento_estrategico": {{
    "fase_1_despertar": ["Driver 1", "Driver 2"],
    "fase_2_desejo": ["Driver 3", "Driver 4"],
    "fase_3_decisao": ["Driver 5", "Driver 6"],
    "fase_4_direcao": ["Driver 7"]
  }},
  "otimizacao_sobreposicoes": {{
    "drivers_complementares": [
      "Diagn√≥stico Brutal ‚Üí Ambi√ß√£o Expandida",
      "Ambiente Vampiro ‚Üí Mentor Salvador"
    ],
    "drivers_reforco": [
      "Ferida Exposta + Diagn√≥stico Brutal",
      "Rel√≥gio Psicol√≥gico + Custo Invis√≠vel"
    ]
  }},
  "top_7_essenciais": [
    "Diagn√≥stico Brutal",
    "Ambi√ß√£o Expandida", 
    "Rel√≥gio Psicol√≥gico",
    "M√©todo vs Sorte",
    "Decis√£o Bin√°ria",
    "Ambiente Vampiro",
    "Coragem Necess√°ria"
  ]
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no sistema de drivers")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no sistema de drivers: {e}")
            return None
    
    def _execute_anti_objection_system(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa sistema completo anti-obje√ß√£o"""
        
        try:
            prompt = f"""
Voc√™ √© o ESPECIALISTA EM PSICOLOGIA DE VENDAS. Crie um ARSENAL PSICOL√ìGICO completo para neutralizar TODAS as obje√ß√µes.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}

Crie um sistema baseado nas 3 OBJE√á√ïES UNIVERSAIS e 5 OBJE√á√ïES OCULTAS CR√çTICAS.

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "objecoes_universais": {{
    "tempo": {{
      "objecao": "Isso n√£o √© prioridade para mim",
      "raiz_emocional": "Medo de mais responsabilidade",
      "contra_ataque": "T√©cnica do C√°lculo da Sangria",
      "scripts": [
        "Cada m√™s que voc√™ adia, voc√™ perde X",
        "O problema cresce enquanto voc√™ est√° ocupado",
        "Esta oportunidade existe agora por raz√£o espec√≠fica"
      ],
      "drives_mentais": ["C√ÅLCULO DA SANGRIA", "CONSEQU√äNCIA EXPONENCIAL"]
    }},
    "dinheiro": {{
      "objecao": "Minha vida n√£o est√° t√£o ruim que precise investir",
      "raiz_emocional": "Medo de perder dinheiro",
      "contra_ataque": "Compara√ß√£o Cruel + ROI Absurdo",
      "scripts": [
        "Voc√™ gasta R$X em coisa sup√©rflua mas hesita em investir",
        "Se conseguir apenas resultado m√≠nimo, j√° pagou o investimento",
        "O que vai perder N√ÉO fazendo √© maior que o investimento"
      ],
      "drives_mentais": ["COMPARA√á√ÉO CRUEL", "ROI ABSURDO"]
    }},
    "confianca": {{
      "objecao": "Me d√™ uma raz√£o para acreditar",
      "raiz_emocional": "Hist√≥rico de fracassos",
      "contra_ataque": "Autoridade T√©cnica + Prova Social + Garantia",
      "scripts": [
        "Eu j√° consegui resultado espec√≠fico usando exatamente isso",
        "Pessoas como voc√™ conseguiram resultado em tempo",
        "Estou t√£o confiante que assumo todo o risco"
      ],
      "drives_mentais": ["AUTORIDADE T√âCNICA", "PROVA SOCIAL QUALIFICADA"]
    }}
  }},
  "objecoes_ocultas_criticas": {{
    "autossuficiencia": {{
      "objecao_oculta": "Acho que consigo sozinho",
      "perfil_tipico": "Pessoas com forma√ß√£o superior, ego profissional",
      "raiz_emocional": "Orgulho / Medo de parecer incompetente",
      "sinais": ["Men√ß√µes de tentar sozinho", "Resist√™ncia a ajuda"],
      "contra_ataque": "O Expert que Precisou de Expert",
      "scripts": [
        "Mesmo sendo autoridade, precisei de ajuda para resultado",
        "Diferen√ßa entre tentar sozinho e ter orienta√ß√£o √© temporal"
      ]
    }},
    "sinal_fraqueza": {{
      "objecao_oculta": "Aceitar ajuda √© admitir fracasso",
      "perfil_tipico": "Homens, l√≠deres, pessoas com imagem a zelar",
      "raiz_emocional": "Medo de julgamento / Perda de status",
      "contra_ataque": "Reframe de Intelig√™ncia + Her√≥is Vulner√°veis",
      "scripts": [
        "Pessoas inteligentes buscam atalhos",
        "Os maiores CEOs do mundo t√™m coaches"
      ]
    }},
    "medo_novo": {{
      "objecao_oculta": "Quando for a hora certa",
      "perfil_tipico": "Pessoas estagnadas mas confort√°veis",
      "raiz_emocional": "Ansiedade sobre nova realidade",
      "contra_ataque": "Dor da Estagna√ß√£o + Janela Hist√≥rica",
      "scripts": [
        "√önica coisa pior que dor da mudan√ßa √© dor do arrependimento",
        "Esta oportunidade existe por contexto espec√≠fico"
      ]
    }}
  }},
  "tecnicas_neutralizacao": {{
    "concordar_valorizar_apresentar": {{
      "estrutura": "Voc√™ tem raz√£o... Por isso criei...",
      "quando_usar": "Obje√ß√µes l√≥gicas v√°lidas",
      "exemplo": "Voc√™ tem raz√£o em ser cauteloso. Por isso criei garantia de 60 dias"
    }},
    "inversao_perspectiva": {{
      "estrutura": "Na verdade √© o oposto do que voc√™ imagina...",
      "quando_usar": "Cren√ßas limitantes",
      "exemplo": "Na verdade, pessoas que mais precisam de ajuda s√£o as que mais resistem"
    }}
  }},
  "arsenal_emergencia": [
    "Vamos ser honestos: voc√™ vai continuar adiando at√© quando?",
    "A √∫nica diferen√ßa entre voc√™ e quem conseguiu √© a decis√£o de agir",
    "Quantas oportunidades voc√™ j√° perdeu por pensar demais?",
    "O medo de errar est√° te impedindo de acertar",
    "Cada 'n√£o' para evolu√ß√£o √© um 'sim' para estagna√ß√£o"
  ],
  "sistema_implementacao": {{
    "pre_lancamento": ["Driver 1", "Driver 2"],
    "durante_evento": ["Driver 3", "Driver 4"],
    "momento_oferta": ["Driver 5", "Driver 6"],
    "pos_oferta": ["Driver 7", "Driver 8"]
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no sistema anti-obje√ß√£o")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no sistema anti-obje√ß√£o: {e}")
            return None
    
    def _execute_pre_pitch_invisible(self, data: Dict[str, Any], drivers_system: Dict[str, Any] = None) -> Optional[Dict[str, Any]]:
        """Executa pr√©-pitch invis√≠vel completo"""
        
        try:
            drivers_info = ""
            if drivers_system:
                drivers_info = f"DRIVERS DISPON√çVEIS: {json.dumps(drivers_system, ensure_ascii=False)[:1000]}"
            
            prompt = f"""
Voc√™ √© o ARQUITETO DO PR√â-PITCH INVIS√çVEL. Crie uma SINFONIA DE TENS√ÉO PSICOL√ìGICA.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}

{drivers_info}

Crie um PR√â-PITCH que prepare o terreno mental para que a venda seja apenas uma formalidade.

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "orquestracao_emocional": {{
    "sequencia_psicologica": [
      {{
        "fase": "QUEBRA",
        "objetivo": "Destruir a ilus√£o confort√°vel",
        "duracao": "3-5 minutos",
        "intensidade": "Alta",
        "drivers_utilizados": ["Diagn√≥stico Brutal"],
        "resultado_esperado": "Desconforto produtivo",
        "tecnicas": ["Confronto direto", "Pergunta desconfort√°vel"]
      }},
      {{
        "fase": "EXPOSI√á√ÉO",
        "objetivo": "Revelar a ferida real",
        "duracao": "4-6 minutos",
        "intensidade": "Crescente",
        "drivers_utilizados": ["Custo Invis√≠vel"],
        "resultado_esperado": "Consci√™ncia da dor",
        "tecnicas": ["C√°lculo de perdas", "Visualiza√ß√£o da dor"]
      }},
      {{
        "fase": "VISLUMBRE",
        "objetivo": "Mostrar o poss√≠vel",
        "duracao": "5-7 minutos",
        "intensidade": "Esperan√ßosa",
        "drivers_utilizados": ["Ambi√ß√£o Expandida"],
        "resultado_esperado": "Desejo amplificado",
        "tecnicas": ["Visualiza√ß√£o do sucesso", "Casos de transforma√ß√£o"]
      }},
      {{
        "fase": "NECESSIDADE",
        "objetivo": "Tornar a mudan√ßa inevit√°vel",
        "duracao": "3-4 minutos",
        "intensidade": "Definitiva",
        "drivers_utilizados": ["M√©todo vs Sorte"],
        "resultado_esperado": "Necessidade de solu√ß√£o",
        "tecnicas": ["Caminho claro", "Mentor necess√°rio"]
      }}
    ]
  }},
  "roteiro_completo": {{
    "abertura": {{
      "tempo": "3-5 minutos",
      "objetivo": "Quebrar padr√£o e despertar consci√™ncia",
      "script": "Roteiro detalhado da abertura",
      "frases_chave": ["Frase 1", "Frase 2"],
      "transicao": "Como conectar com pr√≥xima fase"
    }},
    "desenvolvimento": {{
      "tempo": "8-12 minutos",
      "objetivo": "Amplificar dor e desejo",
      "script": "Roteiro detalhado do desenvolvimento",
      "momentos_criticos": ["Momento 1", "Momento 2"],
      "escalada_emocional": "Como aumentar intensidade"
    }},
    "pre_climax": {{
      "tempo": "3-4 minutos",
      "objetivo": "Criar tens√£o m√°xima",
      "script": "Roteiro detalhado do pr√©-cl√≠max",
      "ponto_virada": "Momento exato da virada",
      "preparacao_pitch": "Como preparar para oferta"
    }},
    "fechamento": {{
      "tempo": "2-3 minutos",
      "objetivo": "Transi√ß√£o perfeita para pitch",
      "script": "Roteiro detalhado do fechamento",
      "ponte_oferta": "Frase de transi√ß√£o para oferta",
      "estado_mental_ideal": "Como devem estar mentalmente"
    }}
  }},
  "variacoes_formato": {{
    "webinario": {{
      "duracao_total": "15-20 minutos",
      "adaptacoes": ["Usar chat para engajamento", "Pausas para perguntas"],
      "timing": "√öltimos 20 minutos antes da oferta"
    }},
    "evento_presencial": {{
      "duracao_total": "25-35 minutos",
      "adaptacoes": ["Intera√ß√£o direta", "Movimenta√ß√£o no palco"],
      "timing": "Distribu√≠do ao longo do evento"
    }},
    "cpl_3_aulas": {{
      "duracao_total": "10-15 minutos",
      "adaptacoes": ["Constru√ß√£o gradual", "Callbacks entre aulas"],
      "timing": "Final da aula 3"
    }}
  }},
  "metricas_sucesso": {{
    "indicadores_durante": [
      "Sil√™ncio absoluto durante ativa√ß√£o",
      "Coment√°rios emocionais no chat",
      "Perguntas sobre quando abre inscri√ß√µes"
    ],
    "indicadores_apos": [
      "Ansiedade vis√≠vel para a oferta",
      "Perguntas sobre pre√ßo/formato",
      "Coment√°rios 'j√° quero comprar'"
    ]
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no pr√©-pitch")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no pr√©-pitch: {e}")
            return None
    
    def _execute_visual_proofs_system(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa sistema completo de provas visuais"""
        
        try:
            prompt = f"""
Voc√™ √© o DIRETOR SUPREMO DE EXPERI√äNCIAS TRANSFORMADORAS. Transforme conceitos abstratos em experi√™ncias f√≠sicas inesquec√≠veis.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}

Crie um ARSENAL COMPLETO de PROVIs (Provas Visuais Instant√¢neas).

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "arsenal_provis": [
    {{
      "nome": "PROVI #1: NOME IMPACTANTE",
      "conceito_alvo": "O que precisa ser instalado/destru√≠do",
      "categoria": "Urg√™ncia/Cren√ßa/Obje√ß√£o/Transforma√ß√£o",
      "prioridade": "Cr√≠tica/Alta/M√©dia",
      "momento_ideal": "Quando executar no evento",
      "objetivo_psicologico": "Mudan√ßa mental espec√≠fica",
      "experimento": "Descri√ß√£o da demonstra√ß√£o f√≠sica",
      "analogia_perfeita": "Assim como experimento ‚Üí Voc√™ aplica√ß√£o",
      "roteiro_completo": {{
        "setup": "Frase de introdu√ß√£o + prepara√ß√£o f√≠sica",
        "execucao": "Passo 1, 2, 3 da demonstra√ß√£o",
        "climax": "Momento exato do AHA!",
        "bridge": "Conex√£o direta com a vida deles"
      }},
      "materiais": [
        "Item 1: especifica√ß√£o exata",
        "Item 2: onde conseguir",
        "Item 3: substitutos poss√≠veis"
      ],
      "variacoes": {{
        "online": "Adapta√ß√£o para c√¢mera",
        "grande_publico": "Vers√£o amplificada",
        "intimista": "Vers√£o simplificada"
      }},
      "gestao_riscos": {{
        "pode_falhar_se": ["Situa√ß√£o 1", "Situa√ß√£o 2"],
        "plano_b": "Alternativa pronta",
        "transformar_erro": "Como usar falha a favor"
      }},
      "frases_impacto": {{
        "durante": "Frase que aumenta tens√£o",
        "revelacao": "Frase no momento aha",
        "ancoragem": "Frase que fica na mem√≥ria"
      }}
    }}
  ],
  "categorias_provis": {{
    "destruidoras_objecao": [
      {{
        "contra": "N√£o tenho tempo",
        "experimentos": ["Ampulheta com dinheiro", "Celular com 47 apps"]
      }},
      {{
        "contra": "N√£o tenho dinheiro", 
        "experimentos": ["Calculadora de gastos invis√≠veis", "Cofrinho furado"]
      }},
      {{
        "contra": "J√° tentei antes",
        "experimentos": ["GPS vs mapa rasgado", "Chave certa vs molho"]
      }}
    ],
    "criadoras_urgencia": [
      "Ampulheta", "Trem partindo", "Porta se fechando", "Mar√© subindo"
    ],
    "instaladoras_crenca": [
      "Lagarta ‚Üí Borboleta", "Semente ‚Üí √Årvore", "Carv√£o ‚Üí Diamante"
    ],
    "provas_metodo": [
      "Quebra-cabe√ßa", "Ingredientes vs receita", "Orquestra com/sem maestro"
    ]
  }},
  "plano_execucao": {{
    "sequencia_otimizada": [
      "PROVI 1: Abertura impactante",
      "PROVI 2: Desenvolvimento da dor",
      "PROVI 3: Amplifica√ß√£o do desejo",
      "PROVI 4: Prova do m√©todo",
      "PROVI 5: Urg√™ncia final"
    ],
    "timeline_detalhado": "Cronograma de execu√ß√£o",
    "narrativa_conectora": "Como cada PROVI prepara o pr√≥ximo",
    "metricas_sucesso": ["Rea√ß√£o da audi√™ncia", "Engajamento", "Convers√£o"]
  }},
  "kit_preparacao": {{
    "lista_materiais": ["Material 1", "Material 2", "Material 3"],
    "checklist_preparacao": ["Item 1", "Item 2", "Item 3"],
    "ensaio_recomendado": "Como ensaiar antes do evento",
    "troubleshooting": "Solu√ß√µes para problemas comuns"
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=4000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no sistema de provas visuais")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no sistema de provas visuais: {e}")
            return None
    
    def _execute_avatar_dashboard(self, data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """Executa dashboard completo do avatar"""
        
        try:
            prompt = f"""
Crie um DASHBOARD ARQUEOL√ìGICO DO AVATAR completo baseado na an√°lise de perfil empresarial.

CONTEXTO:
- Segmento: {data.get('segmento', 'N√£o informado')}
- Produto: {data.get('produto', 'N√£o informado')}
- P√∫blico: {data.get('publico', 'N√£o informado')}
- Pre√ßo: R$ {data.get('preco', 'N√£o informado')}

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "visao_geral": {{
    "publico_analisado": "Perfil do p√∫blico",
    "distribuicao_faturamento": {{
      "acima_5_milhoes": "64%",
      "entre_1_5_milhoes": "32%", 
      "abaixo_1_milhao": "20%"
    }},
    "principais_desafios": [
      "87% presos no n√≠vel operacional",
      "92% faturamento entre R$ 1-10 milh√µes",
      "100% problemas com gest√£o de pessoas"
    ]
  }},
  "analise_dores": {{
    "top_10_dores_estruturadas": [
      {{
        "dor": "Desenvolvimento de Lideran√ßa e Gest√£o de Pessoas",
        "frequencia": "95%",
        "intensidade": "Alta",
        "contexto": "Dificuldade em liderar equipes"
      }},
      {{
        "dor": "Constru√ß√£o de Cultura Organizacional Forte",
        "frequencia": "87%",
        "intensidade": "Alta",
        "contexto": "Falta de valores claros"
      }},
      {{
        "dor": "Fortalecimento da Opera√ß√£o e Processos",
        "frequencia": "92%",
        "intensidade": "Muito Alta",
        "contexto": "Processos desorganizados"
      }}
    ],
    "convergencia_descobertas": {{
      "convergencia": "Gest√£o de Pessoas",
      "descoberta_relevante": "Cultura Organizacional",
      "gap_identificado": "Gest√£o Financeira"
    }}
  }},
  "desejos_motivacoes": {{
    "sonhos_profundos": [
      {{
        "desejo": "Aus√™ncia Produtiva",
        "descricao": "Neg√≥cio funcionar sem presen√ßa constante",
        "intensidade": "Muito Alta"
      }},
      {{
        "desejo": "M√°quina Empresarial Perfeita",
        "descricao": "Sistemas automatizados e eficientes",
        "intensidade": "Alta"
      }},
      {{
        "desejo": "Multiplica√ß√£o Acelerada",
        "descricao": "Crescimento exponencial r√°pido",
        "intensidade": "Alta"
      }}
    ],
    "desejos_expressos": [
      "Escalar o neg√≥cio",
      "Criar m√°quina de vendas",
      "Equipe trabalhando para a empresa",
      "Romper barreira de faturamento"
    ]
  }},
  "comportamento": {{
    "arquetipos_dominantes": {{
      "tecnico_aprisionado": "30%",
      "escalador_frustrado": "40%",
      "visionario_sufocado": "30%"
    }},
    "medos_paralisantes": [
      "Terror da Irrelev√¢ncia",
      "P√¢nico da Depend√™ncia Eterna",
      "Medo da Trai√ß√£o",
      "Pavor do Modelo Errado"
    ],
    "objecoes_reais": [
      "J√° tentei de tudo, nada funciona",
      "Meu neg√≥cio √© muito espec√≠fico",
      "N√£o tenho tempo para implementar"
    ]
  }},
  "insights_ocultos": {{
    "gatilhos_emocionais": ["Liberdade", "Controle", "Legado", "Velocidade"],
    "abordagens_impacto": [
      "Honestidade brutal",
      "Casos reais",
      "M√©todos pr√°ticos",
      "Quick Wins"
    ]
  }},
  "arsenal_tatico": {{
    "estruturacao_mentoria": [
      {{
        "modulo": "Liberta√ß√£o do Operacional",
        "objetivo": "Sair do dia a dia operacional",
        "duracao": "30 dias"
      }},
      {{
        "modulo": "M√°quina de Vendas Previs√≠vel",
        "objetivo": "Sistema de vendas automatizado",
        "duracao": "45 dias"
      }},
      {{
        "modulo": "Processos que Escalam",
        "objetivo": "Opera√ß√£o escal√°vel",
        "duracao": "60 dias"
      }}
    ],
    "formatos_entrega": [
      "Lives semanais",
      "Templates prontos",
      "Simula√ß√µes e role-playing",
      "T√°ticas r√°pidas de implementa√ß√£o"
    ]
  }},
  "linguagem_recomendada": {{
    "substituicoes": {{
      "processo_comercial": "m√°quina de vendas",
      "crescer_gradualmente": "romper barreiras",
      "delegar_tarefas": "time aut√¥nomo",
      "work_life_balance": "liberdade"
    }},
    "tom_ideal": "Direto, confrontador, orientado a resultados",
    "palavras_poder": ["Liberdade", "M√°quina", "Sistema", "Autom√°tico", "Escal√°vel"]
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=3500)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no dashboard do avatar")
            
            return None
            
        except Exception as e:
            logger.error(f"Erro no dashboard do avatar: {e}")
            return None
    
    def _generate_fallback_visceral_analysis(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera an√°lise visceral de fallback"""
        
        segmento = data.get('segmento', 'neg√≥cios')
        
        return {
            'analise_forense_devastadora': {
                'resumo_executivo': {
                    'veredicto_geral': f'An√°lise de {segmento} com potencial alto',
                    'top_3_pontos_fortes': [
                        f'Mercado de {segmento} em crescimento',
                        'Demanda por solu√ß√µes especializadas',
                        'Oportunidade de diferencia√ß√£o'
                    ],
                    'estrategia_principal': f'Posicionamento premium em {segmento}'
                }
            },
            'engenharia_reversa_psicologica': {
                'perfil_psicologico_profundo': {
                    'nome_ficticio': f'Profissional {segmento} Brasileiro',
                    'idade_aproximada': '30-45 anos',
                    'ocupacao_situacao': f'Empreendedor em {segmento}',
                    'jornada_dor': f'Luta para crescer em {segmento}'
                },
                'feridas_abertas': [
                    f'Trabalhar muito em {segmento} sem crescer proporcionalmente',
                    'Sentir-se sempre atr√°s da concorr√™ncia',
                    'Ver outros crescendo mais r√°pido',
                    'N√£o conseguir se desconectar do trabalho'
                ]
            },
            'fallback_mode': True,
            'recommendation': 'Configure APIs para an√°lise visceral completa'
        }

# Inst√¢ncia global
visceral_analysis_engine = VisceralAnalysisEngine()