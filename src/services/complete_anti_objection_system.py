#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ARQV30 Enhanced v2.0 - Complete Anti-Objection System
Sistema Completo de Engenharia Psicol√≥gica Anti-Obje√ß√£o baseado no documento
"""

import time
import logging
import json
from typing import Dict, List, Any, Optional
from services.ai_manager import ai_manager
from services.auto_save_manager import salvar_etapa, salvar_erro

logger = logging.getLogger(__name__)

class CompleteAntiObjectionSystem:
    """Sistema Completo de Engenharia Psicol√≥gica Anti-Obje√ß√£o"""
    
    def __init__(self):
        """Inicializa o sistema completo anti-obje√ß√£o"""
        self.universal_objections = self._load_3_universal_objections()
        self.hidden_objections = self._load_5_hidden_objections()
        self.neutralization_techniques = self._load_neutralization_techniques()
        
        logger.info("Complete Anti-Objection System inicializado")
    
    def _load_3_universal_objections(self) -> Dict[str, Dict[str, Any]]:
        """Carrega as 3 obje√ß√µes universais do documento"""
        return {
            'tempo': {
                'objecao': 'Isso n√£o √© prioridade para mim',
                'raiz_emocional': 'Medo de mais responsabilidade / Falta de clareza sobre import√¢ncia',
                'contra_ataque': 'T√©cnica do C√°lculo da Sangria + Consequ√™ncia Exponencial',
                'drives_mentais': ['C√ÅLCULO DA SANGRIA', 'CONSEQU√äNCIA EXPONENCIAL'],
                'scripts': [
                    'Cada [per√≠odo] que voc√™ adia resolver [problema], voc√™ est√° perdendo [quantia espec√≠fica]',
                    'O problema n√£o para de crescer enquanto voc√™ est√° ocupado com outras coisas',
                    'Esta oportunidade existe agora por [raz√£o espec√≠fica], depois pode n√£o existir mais'
                ]
            },
            'dinheiro': {
                'objecao': 'Minha vida n√£o est√° t√£o ruim que precise investir',
                'raiz_emocional': 'Medo de perder dinheiro / Prioridades desalinhadas / N√£o v√™ valor',
                'contra_ataque': 'Compara√ß√£o Cruel + ROI Absurdo + Custo de Oportunidade',
                'drives_mentais': ['COMPARA√á√ÉO CRUEL', 'ROI ABSURDO'],
                'scripts': [
                    'Voc√™ gasta R$X em [coisa sup√©rflua] mas hesita em investir [valor] em algo que muda sua vida',
                    'Se voc√™ conseguir apenas [resultado m√≠nimo], j√° pagou o investimento [X] vezes',
                    'O que voc√™ vai perder N√ÉO fazendo isso √© muito maior que o investimento'
                ]
            },
            'confianca': {
                'objecao': 'Me d√™ uma raz√£o para acreditar (em voc√™/produto/provas/mim mesmo)',
                'raiz_emocional': 'Hist√≥rico de fracassos / Medo de mais uma decep√ß√£o / Baixa autoestima',
                'contra_ataque': 'Autoridade T√©cnica + Prova Social Qualificada + Garantia Agressiva',
                'drives_mentais': ['AUTORIDADE T√âCNICA INQUESTION√ÅVEL', 'PROVA SOCIAL QUALIFICADA'],
                'scripts': [
                    'Eu j√° [credencial espec√≠fica] e consegui [resultado espec√≠fico] usando exatamente isso',
                    'Pessoas exatamente como voc√™ conseguiram [resultado] em [tempo] seguindo este m√©todo',
                    'Estou t√£o confiante que assumo todo o risco: [garantia espec√≠fica]'
                ]
            }
        }
    
    def _load_5_hidden_objections(self) -> Dict[str, Dict[str, Any]]:
        """Carrega as 5 obje√ß√µes ocultas cr√≠ticas do documento"""
        return {
            'autossuficiencia': {
                'objecao_oculta': 'Acho que consigo sozinho',
                'perfil_tipico': 'Pessoas com forma√ß√£o superior, experi√™ncia na √°rea, ego profissional',
                'raiz_emocional': 'Orgulho / Medo de parecer incompetente',
                'sinais': ['Men√ß√µes de "tentar sozinho"', 'Resist√™ncia a ajuda', 'Linguagem t√©cnica excessiva'],
                'contra_ataque': 'O Expert que Precisou de Expert + Acelera√ß√£o vs Tentativa',
                'scripts': [
                    'Mesmo sendo [autoridade], precisei de ajuda para [resultado espec√≠fico]',
                    'A diferen√ßa entre tentar sozinho e ter orienta√ß√£o √© [compara√ß√£o temporal/financeira]'
                ]
            },
            'sinal_fraqueza': {
                'objecao_oculta': 'Aceitar ajuda √© admitir fracasso',
                'perfil_tipico': 'Homens, l√≠deres, pessoas com imagem a zelar',
                'raiz_emocional': 'Medo de julgamento / Perda de status / Humilha√ß√£o',
                'sinais': ['Minimiza√ß√£o de problemas', '"Est√° tudo bem"', 'Resist√™ncia a expor vulnerabilidade'],
                'contra_ataque': 'Reframe de Intelig√™ncia + Hist√≥rias de Her√≥is Vulner√°veis',
                'scripts': [
                    'Pessoas inteligentes buscam atalhos. Pessoas burras insistem no caminho dif√≠cil',
                    'Os maiores CEOs do mundo t√™m coaches. Coincid√™ncia?'
                ]
            },
            'medo_novo': {
                'objecao_oculta': 'N√£o tenho pressa / Quando for a hora certa',
                'perfil_tipico': 'Pessoas estagnadas mas "confort√°veis", medo do desconhecido',
                'raiz_emocional': 'Ansiedade sobre nova realidade / Zona de conforto',
                'sinais': ['"Quando for a hora certa"', 'Procrastina√ß√£o disfar√ßada', 'Conformismo'],
                'contra_ataque': 'Dor da Estagna√ß√£o + Janela Hist√≥rica',
                'scripts': [
                    'A √∫nica coisa pior que a dor da mudan√ßa √© a dor do arrependimento',
                    'Esta oportunidade existe por [contexto espec√≠fico]. Quem n√£o aproveitar agora...'
                ]
            },
            'prioridades_desequilibradas': {
                'objecao_oculta': 'N√£o √© dinheiro (mas gasta em outras coisas)',
                'perfil_tipico': 'Pessoas que gastam em lazer/consumo mas "n√£o t√™m dinheiro" para evolu√ß√£o',
                'raiz_emocional': 'N√£o reconhece educa√ß√£o como prioridade / V√≠cio em gratifica√ß√£o imediata',
                'sinais': ['Men√ß√µes de gastos em outras √°reas', 'Justificativas financeiras contradit√≥rias'],
                'contra_ataque': 'Compara√ß√£o Cruel + C√°lculo de Oportunidade Perdida',
                'scripts': [
                    'R$200/m√™s em streaming vs R$2000 uma vez para nunca mais passar aperto',
                    'Voc√™ investe mais no seu carro que na sua mente'
                ]
            },
            'autoestima_destruida': {
                'objecao_oculta': 'N√£o confio em mim / Sou eu o problema',
                'perfil_tipico': 'Pessoas com m√∫ltiplas tentativas fracassadas, baixa confian√ßa pessoal',
                'raiz_emocional': 'Hist√≥rico de fracassos / Medo de mais um fracasso',
                'sinais': ['"J√° tentei antes"', 'Hist√≥rico de fracassos', 'Vitimiza√ß√£o', 'Autodesqualifica√ß√£o'],
                'contra_ataque': 'Casos de Pessoas "Piores" + Diferencial do M√©todo',
                'scripts': [
                    'Se [pessoa pior situa√ß√£o] conseguiu, voc√™ tamb√©m consegue',
                    'O problema n√£o era voc√™, era a falta de m√©todo certo'
                ]
            }
        }
    
    def _load_neutralization_techniques(self) -> Dict[str, Dict[str, Any]]:
        """Carrega as 5 t√©cnicas de neutraliza√ß√£o do documento"""
        return {
            'concordar_valorizar_apresentar': {
                'estrutura': 'Voc√™ tem raz√£o... Por isso criei...',
                'quando_usar': 'Obje√ß√µes l√≥gicas v√°lidas',
                'exemplo': 'Voc√™ tem raz√£o em ser cauteloso com investimentos. Por isso criei uma garantia de 60 dias...'
            },
            'inversao_perspectiva': {
                'estrutura': 'Na verdade √© o oposto do que voc√™ imagina...',
                'quando_usar': 'Cren√ßas limitantes',
                'exemplo': 'Na verdade, pessoas que mais precisam de ajuda s√£o as que mais resistem a ela...'
            },
            'memorias_reviravolta': {
                'estrutura': 'Lembre de quando voc√™ decidiu sem certeza...',
                'quando_usar': 'Medo de decis√£o',
                'exemplo': 'Lembre quando voc√™ decidiu [mudan√ßa importante] sem ter certeza absoluta...'
            },
            'confronto_controlado': {
                'estrutura': 'Quantas vezes voc√™ perdeu oportunidade por isso?',
                'quando_usar': 'Padr√µes autodestrutivos',
                'exemplo': 'Quantas vezes voc√™ j√° perdeu oportunidades por "pensar demais"?'
            },
            'nova_crenca': {
                'estrutura': 'Isso √© uma cren√ßa limitante, vou te mostrar outro √¢ngulo...',
                'quando_usar': 'Cren√ßas arraigadas',
                'exemplo': 'Isso √© uma cren√ßa limitante. Vou te mostrar como pessoas "sem tempo" criaram tempo...'
            }
        }
    
    def generate_complete_anti_objection_arsenal(
        self, 
        avatar_data: Dict[str, Any], 
        context_data: Dict[str, Any],
        research_responses: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Gera arsenal completo anti-obje√ß√£o baseado no documento"""
        
        try:
            logger.info("üõ°Ô∏è Gerando arsenal completo anti-obje√ß√£o...")
            
            # Salva dados de entrada
            salvar_etapa("anti_objecao_completa_entrada", {
                "avatar_data": avatar_data,
                "context_data": context_data,
                "research_responses": research_responses
            }, categoria="anti_objecao")
            
            # FASE 1: An√°lise Psicol√≥gica das Respostas
            psychological_analysis = self._execute_psychological_analysis(avatar_data, research_responses)
            salvar_etapa("analise_psicologica", psychological_analysis, categoria="anti_objecao")
            
            # FASE 2: Diagn√≥stico de Obje√ß√µes Espec√≠ficas
            objections_diagnosis = self._execute_objections_diagnosis(psychological_analysis, context_data)
            salvar_etapa("diagnostico_objecoes", objections_diagnosis, categoria="anti_objecao")
            
            # FASE 3: Arsenal de Drives Mentais
            mental_drives_arsenal = self._create_mental_drives_arsenal(objections_diagnosis, context_data)
            salvar_etapa("arsenal_drives", mental_drives_arsenal, categoria="anti_objecao")
            
            # FASE 4: Sistema de Implementa√ß√£o Estrat√©gica
            implementation_system = self._create_strategic_implementation(mental_drives_arsenal, context_data)
            salvar_etapa("implementacao_estrategica", implementation_system, categoria="anti_objecao")
            
            # FASE 5: Arsenal de Emerg√™ncia
            emergency_arsenal = self._create_emergency_arsenal(context_data)
            salvar_etapa("arsenal_emergencia", emergency_arsenal, categoria="anti_objecao")
            
            complete_arsenal = {
                'resumo_executivo': {
                    'perfil_psicologico_audiencia': psychological_analysis.get('perfil_coletivo', {}),
                    'top_5_objecoes_criticas': objections_diagnosis.get('objecoes_prioritarias', []),
                    'estrategia_geral': 'Neutraliza√ß√£o preventiva + Arsenal de emerg√™ncia',
                    'momentos_criticos': ['Pr√©-lan√ßamento', 'Durante evento', 'Momento oferta', 'P√≥s-oferta']
                },
                'analise_psicologica_detalhada': psychological_analysis,
                'diagnostico_objecoes_especificas': objections_diagnosis,
                'arsenal_drives_mentais': mental_drives_arsenal,
                'sistema_implementacao_estrategica': implementation_system,
                'kit_emergencia': emergency_arsenal,
                'objecoes_universais': self._customize_universal_objections(context_data),
                'objecoes_ocultas_criticas': self._customize_hidden_objections(avatar_data),
                'tecnicas_neutralizacao': self.neutralization_techniques,
                'metadata_completo': {
                    'total_objecoes_mapeadas': len(objections_diagnosis.get('objecoes_identificadas', [])),
                    'drives_criados': len(mental_drives_arsenal.get('drives_especificos', [])),
                    'tecnicas_disponeis': len(self.neutralization_techniques),
                    'generated_at': time.time(),
                    'sistema_completo': True
                }
            }
            
            # Salva arsenal completo
            salvar_etapa("arsenal_anti_objecao_completo", complete_arsenal, categoria="anti_objecao")
            
            logger.info("‚úÖ Arsenal completo anti-obje√ß√£o gerado")
            return complete_arsenal
            
        except Exception as e:
            logger.error(f"‚ùå Erro no arsenal completo anti-obje√ß√£o: {e}")
            salvar_erro("arsenal_anti_objecao", e, contexto=context_data)
            return self._generate_fallback_complete_arsenal(context_data)
    
    def _execute_psychological_analysis(
        self, 
        avatar_data: Dict[str, Any], 
        research_responses: Optional[Dict[str, Any]]
    ) -> Dict[str, Any]:
        """FASE 1: An√°lise Psicol√≥gica das Respostas"""
        
        try:
            prompt = f"""
Voc√™ √© o ESPECIALISTA EM PSICOLOGIA DE VENDAS. Execute uma AN√ÅLISE PSICOL√ìGICA PROFUNDA.

AVATAR DATA:
{json.dumps(avatar_data, ensure_ascii=False, indent=2)[:2000]}

RESEARCH RESPONSES:
{json.dumps(research_responses, ensure_ascii=False, indent=2)[:1500] if research_responses else "N√£o dispon√≠vel"}

Execute an√°lise psicol√≥gica seguindo as fases do documento:

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "mapeamento_emocional_geral": {{
    "temperatura_emocional_dominante": "Fria/Morna/Quente",
    "perfil_psicografico_coletivo": "Descri√ß√£o do perfil coletivo",
    "nivel_consciencia": "Problema/Solu√ß√£o/Produto",
    "resistencia_geral": "Baixa/M√©dia/Alta"
  }},
  "identificacao_dores_primarias": {{
    "dor_primaria": {{
      "descricao": "Dor principal identificada",
      "intensidade_emocional": "1-10",
      "frequencia": "Quantos % mencionam",
      "personalizacao": "Como cada um vive essa dor",
      "urgencia": "N√≠vel de urg√™ncia percebida",
      "historico": "H√° quanto tempo sofrem com isso"
    }},
    "dores_secundarias": [
      {{
        "descricao": "Dor secund√°ria 1",
        "intensidade": "1-10",
        "frequencia": "% que menciona"
      }}
    ]
  }},
  "mapeamento_desejos_aspiracoes": {{
    "desejos_explicitos": ["Desejo 1", "Desejo 2"],
    "desejos_implicitos": ["Desejo oculto 1", "Desejo oculto 2"],
    "contradicoes": ["Contradi√ß√£o 1", "Contradi√ß√£o 2"],
    "comparacoes_sociais": ["Com quem se comparam"],
    "visualizacao_sucesso": "Como visualizam o sucesso"
  }},
  "perfil_coletivo": {{
    "arquetipo_dominante": "Tipo psicol√≥gico predominante",
    "medos_paralisantes": ["Medo 1", "Medo 2"],
    "motivadores_principais": ["Motivador 1", "Motivador 2"],
    "linguagem_tipica": ["Express√£o 1", "Express√£o 2"],
    "influenciadores_confianca": ["Fonte 1", "Fonte 2"]
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=2500)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido na an√°lise psicol√≥gica")
            
            return self._create_basic_psychological_analysis(avatar_data)
            
        except Exception as e:
            logger.error(f"Erro na an√°lise psicol√≥gica: {e}")
            return self._create_basic_psychological_analysis(avatar_data)
    
    def _execute_objections_diagnosis(
        self, 
        psychological_analysis: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """FASE 2: Diagn√≥stico de Obje√ß√µes Espec√≠ficas"""
        
        try:
            prompt = f"""
Execute DIAGN√ìSTICO COMPLETO de obje√ß√µes baseado na an√°lise psicol√≥gica.

AN√ÅLISE PSICOL√ìGICA:
{json.dumps(psychological_analysis, ensure_ascii=False, indent=2)[:2000]}

CONTEXTO:
- Segmento: {context_data.get('segmento', 'N√£o informado')}
- Produto: {context_data.get('produto', 'N√£o informado')}
- Pre√ßo: R$ {context_data.get('preco', 'N√£o informado')}

Analise TODAS as obje√ß√µes universais e ocultas:

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "objecoes_universais_detectadas": {{
    "tempo": {{
      "frases_especificas": ["Frase 1", "Frase 2"],
      "atividades_prioritarias": ["Atividade 1", "Atividade 2"],
      "sinais_procrastinacao": ["Sinal 1", "Sinal 2"],
      "rotina_atual": "Descri√ß√£o da rotina",
      "tratamento_especifico": {{
        "drives_mentais": ["Drive 1", "Drive 2"],
        "historias_consequencia": ["Hist√≥ria 1"],
        "reformulacao": "Como reformular 'tempo' como 'import√¢ncia'",
        "calculo_custo": "C√°lculo espec√≠fico de custo de oportunidade"
      }}
    }},
    "dinheiro": {{
      "como_se_referem": ["Express√£o 1", "Express√£o 2"],
      "outras_areas_investimento": ["√Årea 1", "√Årea 2"],
      "dificuldade_vs_prioridade": "An√°lise da rela√ß√£o",
      "justificativas_gastos": ["Justificativa 1"],
      "tratamento_especifico": {{
        "tecnica_piorar_vida": "Como aplicar",
        "comparacoes_investimento": ["Compara√ß√£o 1"],
        "historias_roi": ["Hist√≥ria ROI"],
        "ressignificacao": "Gasto vs investimento vs custo de n√£o agir"
      }}
    }},
    "confianca": {{
      "em_quem_desconfiam": ["Alvo 1", "Alvo 2"],
      "experiencias_negativas": ["Experi√™ncia 1"],
      "referencia_autoridades": ["Autoridade 1"],
      "desconfianca_si_mesmos": "N√≠vel de autoconfian√ßa",
      "tratamento_especifico": {{
        "provas_sociais_especificas": ["Prova 1"],
        "garantias_removem_riscos": ["Garantia 1"],
        "autoridade_construida": "Como construir",
        "validacao_preocupacoes": "Como validar medos"
      }}
    }}
  }},
  "objecoes_ocultas_identificadas": {{
    "autossuficiencia": {{
      "sinais_detectados": ["Sinal 1", "Sinal 2"],
      "perfil_tipico_presente": "Sim/N√£o",
      "raiz_emocional_ativa": "Orgulho/Medo incompet√™ncia",
      "contra_ataque_especifico": "Expert que Precisou de Expert customizado"
    }},
    "sinal_fraqueza": {{
      "sinais_detectados": ["Sinal 1"],
      "perfil_tipico_presente": "Sim/N√£o",
      "contra_ataque_especifico": "Reframe de Intelig√™ncia customizado"
    }},
    "medo_novo": {{
      "sinais_detectados": ["Sinal 1"],
      "perfil_tipico_presente": "Sim/N√£o",
      "contra_ataque_especifico": "Dor da Estagna√ß√£o customizada"
    }},
    "prioridades_desequilibradas": {{
      "sinais_detectados": ["Sinal 1"],
      "gastos_outras_areas": ["√Årea 1"],
      "contra_ataque_especifico": "Compara√ß√£o Cruel customizada"
    }},
    "autoestima_destruida": {{
      "sinais_detectados": ["Sinal 1"],
      "historico_fracassos": ["Fracasso 1"],
      "contra_ataque_especifico": "Casos Pessoas Piores customizado"
    }}
  }},
  "objecoes_prioritarias": [
    "Obje√ß√£o 1 mais cr√≠tica",
    "Obje√ß√£o 2 mais cr√≠tica",
    "Obje√ß√£o 3 mais cr√≠tica",
    "Obje√ß√£o 4 mais cr√≠tica",
    "Obje√ß√£o 5 mais cr√≠tica"
  ],
  "objecoes_identificadas": [
    "Lista completa de todas as obje√ß√µes identificadas"
  ]
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=3000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no diagn√≥stico de obje√ß√µes")
            
            return self._create_basic_objections_diagnosis(context_data)
            
        except Exception as e:
            logger.error(f"Erro no diagn√≥stico de obje√ß√µes: {e}")
            return self._create_basic_objections_diagnosis(context_data)
    
    def _create_mental_drives_arsenal(
        self, 
        objections_diagnosis: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """FASE 3: Arsenal de Drives Mentais"""
        
        try:
            prompt = f"""
Crie ARSENAL COMPLETO de drives mentais anti-obje√ß√£o.

DIAGN√ìSTICO DE OBJE√á√ïES:
{json.dumps(objections_diagnosis, ensure_ascii=False, indent=2)[:2000]}

CONTEXTO:
- Segmento: {context_data.get('segmento', 'N√£o informado')}
- Produto: {context_data.get('produto', 'N√£o informado')}

Crie drives espec√≠ficos para cada categoria:

RETORNE APENAS JSON V√ÅLIDO:

```json
{{
  "drives_elevacao_prioridade": [
    {{
      "nome": "C√ÅLCULO DA SANGRIA",
      "objetivo": "Elevar prioridade para obje√ß√µes de tempo",
      "gatilho": "Mostrar perda cont√≠nua por ina√ß√£o",
      "script_template": "Cada [per√≠odo] sem [a√ß√£o] = R$ [valor] perdidos",
      "historia_visceral": "Hist√≥ria espec√≠fica de 150+ palavras",
      "comando_acao": "Comando espec√≠fico de a√ß√£o",
      "frases_ancoragem": ["Frase 1", "Frase 2", "Frase 3"]
    }}
  ],
  "drives_justificacao_investimento": [
    {{
      "nome": "COMPARA√á√ÉO CRUEL",
      "objetivo": "Justificar investimento para obje√ß√µes de dinheiro",
      "gatilho": "Contrastar gastos f√∫teis com investimento transformador",
      "script_template": "R$X em [futilidade] vs R$Y em [transforma√ß√£o]",
      "historia_visceral": "Hist√≥ria espec√≠fica de compara√ß√£o",
      "comando_acao": "Redefina suas prioridades financeiras",
      "frases_ancoragem": ["Frase 1", "Frase 2", "Frase 3"]
    }}
  ],
  "drives_construcao_confianca": [
    {{
      "nome": "AUTORIDADE T√âCNICA INQUESTION√ÅVEL",
      "objetivo": "Construir confian√ßa para obje√ß√µes de credibilidade",
      "gatilho": "Demonstrar expertise atrav√©s de conhecimento profundo",
      "script_template": "Eu j√° [credencial] e consegui [resultado] usando isso",
      "historia_visceral": "Hist√≥ria de autoridade espec√≠fica",
      "comando_acao": "Confie na experi√™ncia comprovada",
      "frases_ancoragem": ["Frase 1", "Frase 2", "Frase 3"]
    }}
  ],
  "drives_objecoes_ocultas": [
    {{
      "nome": "O EXPERT QUE PRECISOU DE EXPERT",
      "objetivo": "Contra autossufici√™ncia",
      "gatilho": "Mostrar que at√© experts precisam de orienta√ß√£o",
      "script_template": "Mesmo sendo [autoridade], precisei de ajuda para [resultado]",
      "historia_visceral": "Hist√≥ria de expert vulner√°vel",
      "comando_acao": "Seja inteligente, busque orienta√ß√£o",
      "frases_ancoragem": ["Frase 1", "Frase 2", "Frase 3"]
    }}
  ],
  "templates_scripts": {{
    "concordancia_virada": "Voc√™ tem raz√£o... Por isso criei...",
    "confronto_controlado": "Quantas vezes voc√™ perdeu oportunidade por isso?",
    "historia_visceral": "Era uma vez [personagem] que [situa√ß√£o]...",
    "calculo_brutal": "Vamos fazer as contas: [c√°lculo espec√≠fico]"
  }}
}}
```
"""
            
            response = ai_manager.generate_analysis(prompt, max_tokens=3000)
            
            if response:
                clean_response = response.strip()
                if "```json" in clean_response:
                    start = clean_response.find("```json") + 7
                    end = clean_response.rfind("```")
                    clean_response = clean_response[start:end].strip()
                
                try:
                    return json.loads(clean_response)
                except json.JSONDecodeError:
                    logger.warning("JSON inv√°lido no arsenal de drives")
            
            return self._create_basic_drives_arsenal(context_data)
            
        except Exception as e:
            logger.error(f"Erro no arsenal de drives: {e}")
            return self._create_basic_drives_arsenal(context_data)
    
    def _create_strategic_implementation(
        self, 
        drives_arsenal: Dict[str, Any], 
        context_data: Dict[str, Any]
    ) -> Dict[str, Any]:
        """FASE 4: Sistema de Implementa√ß√£o Estrat√©gica"""
        
        return {
            'mapeamento_por_estagio': {
                'pre_lancamento': {
                    'drives_recomendados': ['C√ÅLCULO DA SANGRIA', 'OPORTUNIDADE OCULTA'],
                    'objetivo': 'Prepara√ß√£o subliminar',
                    'formato': 'Lives de aquecimento',
                    'intensidade': 'Baixa a m√©dia'
                },
                'durante_evento': {
                    'drives_recomendados': ['DIAGN√ìSTICO BRUTAL', 'COMPARA√á√ÉO CRUEL'],
                    'objetivo': 'Instala√ß√£o principal',
                    'formato': 'CPL ou webinar',
                    'intensidade': 'M√©dia a alta'
                },
                'momento_oferta': {
                    'drives_recomendados': ['AUTORIDADE T√âCNICA', 'ROI ABSURDO'],
                    'objetivo': 'Neutraliza√ß√£o final',
                    'formato': 'Pitch direto',
                    'intensidade': 'M√°xima'
                },
                'pos_oferta': {
                    'drives_recomendados': ['EXPERT QUE PRECISOU', 'DECIS√ÉO BIN√ÅRIA'],
                    'objetivo': 'Eliminar hesita√ß√£o',
                    'formato': 'Follow-up',
                    'intensidade': 'Focada'
                }
            },
            'personalizacao_por_perfil': self._create_persona_customization(drives_arsenal, context_data),
            'cronograma_implementacao': self._create_implementation_timeline(drives_arsenal),
            'metricas_eficacia': [
                'Taxa de obje√ß√µes por tipo',
                'Tempo m√©dio de neutraliza√ß√£o',
                'Resist√™ncia p√≥s-neutraliza√ß√£o',
                'Taxa de convers√£o por drive'
            ]
        }
    
    def _create_persona_customization(self, drives_arsenal: Dict[str, Any], context_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """Cria personaliza√ß√£o por perfil"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return [
            {
                'nome_persona': f'O C√©tico de {segmento}',
                'perfil_psicologico': 'Desconfiado, anal√≠tico, precisa de muitas provas',
                'objecoes_primarias': ['confian√ßa', 'autossufici√™ncia'],
                'drives_eficazes': ['AUTORIDADE T√âCNICA', 'PROVA SOCIAL QUALIFICADA'],
                'linguagem_tom_ideal': 'T√©cnico, baseado em dados, respeitoso',
                'momentos_resistencia': ['Primeira apresenta√ß√£o', 'Momento da oferta']
            },
            {
                'nome_persona': f'O Ocupado de {segmento}',
                'perfil_psicologico': 'Sempre correndo, prioridades desalinhadas',
                'objecoes_primarias': ['tempo', 'prioridades_desequilibradas'],
                'drives_eficazes': ['C√ÅLCULO DA SANGRIA', 'COMPARA√á√ÉO CRUEL'],
                'linguagem_tom_ideal': 'Direto, urgente, focado em resultados',
                'momentos_resistencia': ['In√≠cio da apresenta√ß√£o', 'Explica√ß√µes longas']
            },
            {
                'nome_persona': f'O Queimado de {segmento}',
                'perfil_psicologico': 'J√° tentou muito, baixa autoestima, vitimiza√ß√£o',
                'objecoes_primarias': ['autoestima_destru√≠da', 'confian√ßa'],
                'drives_eficazes': ['CASOS PESSOAS PIORES', 'DIFERENCIAL DO M√âTODO'],
                'linguagem_tom_ideal': 'Emp√°tico, encorajador, baseado em casos similares',
                'momentos_resistencia': ['Qualquer promessa', 'Garantias']
            }
        ]
    
    def _create_implementation_timeline(self, drives_arsenal: Dict[str, Any]) -> Dict[str, Any]:
        """Cria timeline de implementa√ß√£o"""
        
        return {
            'semana_1_preparacao': {
                'atividades': ['Mapear obje√ß√µes espec√≠ficas da audi√™ncia', 'Preparar hist√≥rias viscerais', 'Treinar scripts'],
                'drives_foco': ['Prepara√ß√£o de autoridade', 'Coleta de casos'],
                'entregaveis': ['Scripts prontos', 'Hist√≥rias testadas']
            },
            'semana_2_aquecimento': {
                'atividades': ['Lives de prepara√ß√£o', 'Instala√ß√£o de drives b√°sicos', 'Teste de rea√ß√µes'],
                'drives_foco': ['OPORTUNIDADE OCULTA', 'DIAGN√ìSTICO SUAVE'],
                'entregaveis': ['Audi√™ncia preparada', 'Obje√ß√µes mapeadas']
            },
            'evento_principal': {
                'atividades': ['Instala√ß√£o completa de drives', 'Neutraliza√ß√£o ativa', 'Monitoramento rea√ß√µes'],
                'drives_foco': ['Todos os drives principais'],
                'entregaveis': ['Obje√ß√µes neutralizadas', 'Audi√™ncia convertida']
            },
            'pos_evento': {
                'atividades': ['Follow-up personalizado', 'Neutraliza√ß√£o residual', 'An√°lise resultados'],
                'drives_foco': ['CORAGEM NECESS√ÅRIA', 'DECIS√ÉO BIN√ÅRIA'],
                'entregaveis': ['Convers√µes finalizadas', 'Relat√≥rio de efic√°cia']
            }
        }
    
    def _create_emergency_arsenal(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """FASE 5: Arsenal de Emerg√™ncia"""
        
        return {
            'objecoes_ultima_hora': {
                'preciso_pensar': {
                    'diagnostico_rapido': 'Medo de decis√£o ou falta de urg√™ncia',
                    'tratamento_imediato': 'REL√ìGIO PSICOL√ìGICO + CUSTO INVIS√çVEL',
                    'script_emergencia': 'Pensar √© importante, mas pensar demais paralisa...',
                    'validacao': 'Entendo a necessidade de refletir',
                    'follow_up': 'Prazo espec√≠fico para decis√£o'
                },
                'nao_e_momento_certo': {
                    'diagnostico_rapido': 'Zona de conforto ou medo do novo',
                    'tratamento_imediato': 'DOR DA ESTAGNA√á√ÉO + JANELA HIST√ìRICA',
                    'script_emergencia': 'Momento certo √© uma ilus√£o que mant√©m voc√™ parado...',
                    'validacao': 'Compreendo a cautela',
                    'follow_up': 'Mostrar custo de esperar'
                },
                'vou_fazer_depois': {
                    'diagnostico_rapido': 'Procrastina√ß√£o ou prioridades desalinhadas',
                    'tratamento_imediato': 'CONSEQU√äNCIA EXPONENCIAL + COMPARA√á√ÉO CRUEL',
                    'script_emergencia': 'Depois √© onde os sonhos v√£o morrer...',
                    'validacao': 'Entendo que tem outras prioridades',
                    'follow_up': 'C√°lculo do custo de adiar'
                }
            },
            'kit_primeiros_socorros': {
                'diagnostico_rapido': [
                    'Identificar tipo de obje√ß√£o em 30 segundos',
                    'Mapear raiz emocional imediatamente',
                    'Selecionar drive apropriado'
                ],
                'tratamento_imediato': [
                    'Aplicar t√©cnica de neutraliza√ß√£o',
                    'Usar script de emerg√™ncia',
                    'Validar preocupa√ß√£o'
                ],
                'validacao': [
                    'Confirmar neutraliza√ß√£o',
                    'Verificar estado emocional',
                    'Preparar pr√≥ximo passo'
                ],
                'follow_up': [
                    'Refor√ßar neutraliza√ß√£o',
                    'Adicionar prova social',
                    'Criar urg√™ncia espec√≠fica'
                ]
            },
            'scripts_emergencia_prontos': [
                'Vamos ser honestos: voc√™ vai continuar adiando at√© quando?',
                'A √∫nica diferen√ßa entre voc√™ e quem j√° conseguiu √© a decis√£o de agir',
                'Quantas oportunidades voc√™ j√° perdeu por "pensar demais"?',
                'O medo de errar est√° te impedindo de acertar',
                'Voc√™ prefere o arrependimento de ter tentado ou de n√£o ter tentado?',
                'Cada "n√£o" que voc√™ diz para evolu√ß√£o √© um "sim" para estagna√ß√£o',
                'O tempo que voc√™ est√° perdendo pensando, outros est√£o usando para agir',
                'Sua zona de conforto √© uma pris√£o disfar√ßada de seguran√ßa'
            ]
        }
    
    def _customize_universal_objections(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Customiza obje√ß√µes universais para o contexto"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        customized = {}
        
        for obj_type, obj_data in self.universal_objections.items():
            customized[obj_type] = obj_data.copy()
            customized[obj_type]['contexto_segmento'] = segmento
            customized[obj_type]['scripts_customizados'] = [
                script.replace('[per√≠odo]', 'm√™s')
                      .replace('[problema]', f'situa√ß√£o em {segmento}')
                      .replace('[quantia espec√≠fica]', 'R$ 10.000 em oportunidades')
                for script in obj_data['scripts']
            ]
        
        return customized
    
    def _customize_hidden_objections(self, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Customiza obje√ß√µes ocultas baseado no avatar"""
        
        customized = {}
        personalidade = avatar_data.get('perfil_psicografico', {}).get('personalidade', '').lower()
        
        for obj_type, obj_data in self.hidden_objections.items():
            customized[obj_type] = obj_data.copy()
            
            # Calcula probabilidade baseado no perfil
            if obj_type == 'autossuficiencia' and any(trait in personalidade for trait in ['independente', 'autoconfiante']):
                customized[obj_type]['probabilidade'] = 'Alta'
            elif obj_type == 'sinal_fraqueza' and 'l√≠der' in personalidade:
                customized[obj_type]['probabilidade'] = 'M√©dia'
            else:
                customized[obj_type]['probabilidade'] = 'Baixa'
        
        return customized
    
    def _create_basic_psychological_analysis(self, avatar_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria an√°lise psicol√≥gica b√°sica como fallback"""
        
        return {
            'mapeamento_emocional_geral': {
                'temperatura_emocional_dominante': 'Morna',
                'perfil_psicografico_coletivo': 'Profissionais ambiciosos mas sobrecarregados',
                'nivel_consciencia': 'Problema',
                'resistencia_geral': 'M√©dia'
            },
            'identificacao_dores_primarias': {
                'dor_primaria': {
                    'descricao': 'Trabalhar muito sem crescer proporcionalmente',
                    'intensidade_emocional': '8',
                    'frequencia': '85%',
                    'urgencia': 'Alta'
                }
            },
            'perfil_coletivo': {
                'arquetipo_dominante': 'O Escalador Frustrado',
                'medos_paralisantes': ['Fracasso p√∫blico', 'Estagna√ß√£o'],
                'motivadores_principais': ['Liberdade', 'Reconhecimento']
            },
            'fallback_mode': True
        }
    
    def _create_basic_objections_diagnosis(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria diagn√≥stico b√°sico de obje√ß√µes"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return {
            'objecoes_universais_detectadas': {
                'tempo': {
                    'frases_especificas': [f'N√£o tenho tempo para implementar em {segmento}'],
                    'tratamento_especifico': {
                        'drives_mentais': ['C√ÅLCULO DA SANGRIA'],
                        'calculo_custo': f'Cada m√™s sem otimizar {segmento} = R$ 10.000 perdidos'
                    }
                },
                'dinheiro': {
                    'como_se_referem': ['Investimento alto', 'N√£o cabe no or√ßamento'],
                    'tratamento_especifico': {
                        'comparacoes_investimento': [f'ROI em {segmento} paga investimento em 3 meses']
                    }
                },
                'confianca': {
                    'em_quem_desconfiam': ['Gurus', 'Promessas mirabolantes'],
                    'tratamento_especifico': {
                        'autoridade_construida': f'Expertise comprovada em {segmento}'
                    }
                }
            },
            'objecoes_prioritarias': [
                f'N√£o tenho tempo para implementar em {segmento}',
                'Preciso pensar melhor sobre o investimento',
                f'Meu caso em {segmento} √© muito espec√≠fico',
                'J√° tentei outras coisas e n√£o funcionaram',
                'Preciso de mais garantias'
            ],
            'fallback_mode': True
        }
    
    def _create_basic_drives_arsenal(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Cria arsenal b√°sico de drives"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return {
            'drives_elevacao_prioridade': [
                {
                    'nome': f'C√ÅLCULO DA SANGRIA EM {segmento.upper()}',
                    'objetivo': 'Elevar prioridade para obje√ß√µes de tempo',
                    'script_template': f'Cada m√™s sem otimizar {segmento} = R$ 10.000 perdidos',
                    'frases_ancoragem': [f'Tempo perdido em {segmento} n√£o volta']
                }
            ],
            'drives_justificacao_investimento': [
                {
                    'nome': f'ROI ABSURDO EM {segmento.upper()}',
                    'objetivo': 'Justificar investimento',
                    'script_template': f'ROI m√©dio em {segmento}: 300-500% em 12 meses',
                    'frases_ancoragem': [f'Investimento em {segmento} se paga sozinho']
                }
            ],
            'fallback_mode': True
        }
    
    def _generate_fallback_complete_arsenal(self, context_data: Dict[str, Any]) -> Dict[str, Any]:
        """Gera arsenal completo de fallback"""
        
        segmento = context_data.get('segmento', 'neg√≥cios')
        
        return {
            'resumo_executivo': {
                'perfil_psicologico_audiencia': f'Profissionais de {segmento} ambiciosos',
                'top_5_objecoes_criticas': [
                    f'N√£o tenho tempo para {segmento}',
                    'Investimento muito alto',
                    'Preciso de mais garantias',
                    f'Meu caso em {segmento} √© espec√≠fico',
                    'J√° tentei outras coisas'
                ],
                'estrategia_geral': 'Neutraliza√ß√£o preventiva com drives customizados'
            },
            'objecoes_universais': self._customize_universal_objections(context_data),
            'objecoes_ocultas_criticas': self.hidden_objections,
            'tecnicas_neutralizacao': self.neutralization_techniques,
            'arsenal_emergencia': [
                f'Quantas oportunidades em {segmento} voc√™ j√° perdeu por hesitar?',
                f'Seus concorrentes em {segmento} n√£o est√£o esperando voc√™ se decidir',
                f'O custo de n√£o agir em {segmento} √© maior que o investimento'
            ],
            'fallback_mode': True,
            'sistema_completo': True
        }

# Inst√¢ncia global
complete_anti_objection_system = CompleteAntiObjectionSystem()